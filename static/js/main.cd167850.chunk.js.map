{"version":3,"sources":["components/Dashboard/Balance/Balance.module.css","components/Dashboard/Controls/Controls.module.css","components/Dashboard/TransactionHistory/TransactionHistory.module.css","components/Dashboard/Controls/Controls.jsx","components/Dashboard/Balance/Balance.jsx","components/Dashboard/TransactionHistory/TransactionHistory.jsx","components/Dashboard/Dashboard.jsx","index.js"],"names":["module","exports","Controls","className","styles","controls","type","name","value","this","props","amount","onChange","handleChange","onClick","onWithdraw","onDeposit","Component","defaultProps","Balance","balance","income","expenses","balanceData","role","aria-label","TransactionHistory","transactions","history","map","transaction","key","id","date","Dashboard","state","transactionType","e","setState","target","alert","Number","currentTarget","prevState","saveTransaction","console","log","shortId","generate","Date","toLocaleString","handleSubmit","ReactDOM","render","document","getElementById"],"mappings":"uIACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,+B,mBCAnED,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,QAAU,sC,wMCEPC,E,iLAMjB,OACE,6BAASC,UAAWC,IAAOC,UACzB,2BACEC,KAAK,SACLC,KAAK,SACLC,MAAOC,KAAKC,MAAMC,OAClBC,SAAUH,KAAKC,MAAMG,eAEvB,4BAAQP,KAAK,SAASC,KAAK,WAAWO,QAASL,KAAKC,MAAMK,YAA1D,YAGA,4BAAQT,KAAK,SAASC,KAAK,UAAUO,QAASL,KAAKC,MAAMM,WAAzD,gB,GAjB8BC,aAAjBf,EACZgB,aAAe,G,oBCiBTC,EAlBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAQC,EAApB,EAAoBA,SAApB,OACd,6BAASnB,UAAWC,IAAOgB,SACzB,0BAAMjB,UAAWC,IAAOmB,aACtB,0BAAMC,KAAK,MAAMC,aAAW,MAA5B,gBAGCJ,EAJH,KAMA,0BAAMlB,UAAWC,IAAOmB,aACtB,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,gBAGCH,EAJH,KAMA,0BAAMnB,UAAWC,IAAOmB,aAAxB,YAA+CH,EAA/C,O,iBCOWM,EArBY,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACzB,2BAAOxB,UAAWC,IAAOwB,SACvB,+BACE,4BACE,2CACA,sCACA,sCAGJ,+BACGD,EAAaE,KAAI,SAAAC,GAAW,OAC3B,wBAAIC,IAAKD,EAAYE,IACnB,4BAAKF,EAAYxB,MACjB,4BAAKwB,EAAYnB,OAAjB,KACA,4BAAKmB,EAAYG,a,iBCGNC,E,2MAKnBC,MAAQ,CACNR,aAAc,GACdS,gBAAiB,GACjBhB,QAAS,EACTT,OAAQ,GACRU,OAAQ,GAERC,SAAU,I,EAEZT,aAAe,SAAAwB,GACb,EAAKC,SAAS,CAAE3B,OAAQ0B,EAAEE,OAAO/B,S,EAEnCO,WAAa,SAAAsB,GACP,EAAKF,MAAMxB,QAAU,EACvB6B,MAAM,+MAGJ,EAAKL,MAAMxB,OAAS,EAAKwB,MAAMf,QACjCoB,MAAM,sSAGR,EAAKF,SAAS,CACZlB,QAASqB,OAAO,EAAKN,MAAMf,SAAWqB,OAAO,EAAKN,MAAMxB,QACxDyB,gBAAiBC,EAAEK,cAAcnC,KACjCI,OAAQ,KAEV,EAAK2B,UAAS,SAAAK,GAAS,MAAK,CAC1BrB,UAAsE,GAA3DmB,OAAOE,EAAUrB,UAAYmB,OAAO,EAAKN,MAAMxB,aAE5D,EAAKiC,gBAAgB,EAAKT,MAAMxB,OAAQ,EAAKwB,MAAMC,mB,EAErDpB,UAAY,SAAAqB,GACN,EAAKF,MAAMxB,QAAU,EACvB6B,MAAM,gNAGR,EAAKF,SAAS,CACZlB,QAASqB,OAAO,EAAKN,MAAMf,SAAWqB,OAAO,EAAKN,MAAMxB,QACxDyB,gBAAiBC,EAAEK,cAAcnC,KACjCI,OAAQ,KAEV,EAAK2B,UAAS,SAAAK,GAAS,MAAK,CAC1BtB,OAAQoB,OAAOE,EAAUtB,QAAUoB,OAAO,EAAKN,MAAMxB,YAGvD,EAAKiC,gBAAgB,EAAKT,MAAMxB,OAAQ,EAAKwB,MAAMC,iBACnDS,QAAQC,IAAI,EAAKX,MAAMC,mB,EAEzBQ,gBAAkB,SAACjC,EAAQyB,GACzB,IAAMN,EAAc,CAClBE,GAAIe,IAAQC,WACZrC,OAAQA,EACRsB,MAAM,IAAIgB,MAAOC,iBACjB5C,KAAM8B,GAER,EAAKe,aAAarB,I,EAEpBqB,aAAe,SAAArB,GACb,EAAKQ,UAAS,SAAAH,GAAK,MAAK,CACtBR,aAAa,GAAD,mBAAM,EAAKQ,MAAMR,cAAjB,CAA+BG,S,wEAIrC,IAAD,EACqDrB,KAAK0B,MAAzDxB,EADD,EACCA,OAAQW,EADT,EACSA,SAAUD,EADnB,EACmBA,OAAQD,EAD3B,EAC2BA,QAASO,EADpC,EACoCA,aAC3C,OACE,yBAAKxB,UAAU,aACb,kBAAC,EAAD,CACEQ,OAAQA,EACRE,aAAcJ,KAAKI,aACnBE,WAAYN,KAAKM,WACjBC,UAAWP,KAAKO,YAGlB,kBAAC,EAAD,CAASI,QAASA,EAASC,OAAQA,EAAQC,SAAUA,IAErD,kBAAC,EAAD,CAAoBK,aAAcA,S,GAjFHV,aAAlBiB,EACZhB,aAAe,GChBxBkC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,W","file":"static/js/main.cd167850.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__zQEqW\",\"balanceData\":\"Balance_balanceData__1-2jW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3aeoz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__33oRN\"};","import React, { Component } from 'react';\r\nimport styles from './Controls.module.css';\r\n\r\nexport default class Controls extends Component {\r\n  static defaultProps = {};\r\n\r\n  static propTypes = {};\r\n\r\n  render() {\r\n    return (\r\n      <section className={styles.controls}>\r\n        <input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          value={this.props.amount}\r\n          onChange={this.props.handleChange}\r\n        />\r\n        <button type=\"button\" name=\"Withdraw\" onClick={this.props.onWithdraw}>\r\n          Withdraw\r\n        </button>\r\n        <button type=\"button\" name=\"Deposit\" onClick={this.props.onDeposit}>\r\n          Deposit\r\n        </button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styles from './Balance.module.css';\r\n\r\nconst Balance = ({ balance, income, expenses }) => (\r\n  <section className={styles.balance}>\r\n    <span className={styles.balanceData}>\r\n      <span role=\"img\" aria-label=\"up\">\r\n        ⬆️\r\n      </span>\r\n      {income}$\r\n    </span>\r\n    <span className={styles.balanceData}>\r\n      <span role=\"img\" aria-label=\"down\">\r\n        ⬇️\r\n      </span>\r\n      {expenses}$\r\n    </span>\r\n    <span className={styles.balanceData}>Balance: {balance}$</span>\r\n  </section>\r\n);\r\n\r\nexport default Balance;\r\n\r\n/*\r\nbalance - текущий баланс\r\nincome - общая сумма доходов\r\nexpenses - общая сумма расходов\r\n*/\r\n","import React from 'react';\r\nimport styles from './TransactionHistory.module.css';\r\n\r\nconst TransactionHistory = ({ transactions }) => (\r\n  <table className={styles.history}>\r\n    <thead>\r\n      <tr>\r\n        <th>Transaction</th>\r\n        <th>Amount</th>\r\n        <th>Date</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {transactions.map(transaction => (\r\n        <tr key={transaction.id}>\r\n          <td>{transaction.type}</td>\r\n          <td>{transaction.amount}$</td>\r\n          <td>{transaction.date}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nexport default TransactionHistory;\r\n","/*Необходимо создать компоненты <Dashboard>, <Controls>, <Balance> и <TransactionHistory> c необходимыми пропами и состоянием.\r\n\r\nОписание компонента Dashboard\r\nРодительский компонент, контейнер. В состоянии компонент хранит историю \r\nтранзакций (массив объектов) в state.transactions и текущий баланс (число) в state.balance, \r\nи пробрасывает необходимые данные своим детям как пропы.\r\n\r\nКаждая транзакиця это объект следующего формата:\r\n\r\nid - уникальный идентификатор, строка. Для генерации id используй пакет shortid или uuid.\r\ntype - тип транзакции, один из двух, deposit или withdrawal, строка.\r\namount - сумма транзакции, число.\r\ndate - дата транзакции, результат метода Date.prototype.toLocaleString(), строка. */\r\n\r\nimport React, { Component } from 'react';\r\nimport Controls from './Controls/Controls';\r\nimport Balance from './Balance/Balance';\r\nimport TransactionHistory from './TransactionHistory/TransactionHistory';\r\nimport shortId from 'shortid';\r\n\r\nexport default class Dashboard extends Component {\r\n  static defaultProps = {};\r\n\r\n  static propTypes = {};\r\n\r\n  state = {\r\n    transactions: [],\r\n    transactionType: '',\r\n    balance: 0,\r\n    amount: '',\r\n    income: '',\r\n\r\n    expenses: '',\r\n  };\r\n  handleChange = e => {\r\n    this.setState({ amount: e.target.value });\r\n  };\r\n  onWithdraw = e => {\r\n    if (this.state.amount <= 0) {\r\n      alert('Введите сумму для проведения операции!');\r\n      return;\r\n    }\r\n    if (this.state.amount > this.state.balance) {\r\n      alert('На счету недостаточно средств для проведения операции!');\r\n      return;\r\n    }\r\n    this.setState({\r\n      balance: Number(this.state.balance) - Number(this.state.amount),\r\n      transactionType: e.currentTarget.name,\r\n      amount: '',\r\n    });\r\n    this.setState(prevState => ({\r\n      expenses: (Number(prevState.expenses) - Number(this.state.amount)) * -1,\r\n    }));\r\n    this.saveTransaction(this.state.amount, this.state.transactionType);\r\n  };\r\n  onDeposit = e => {\r\n    if (this.state.amount <= 0) {\r\n      alert('Введите сумму для проведения операции!');\r\n      return;\r\n    }\r\n    this.setState({\r\n      balance: Number(this.state.balance) + Number(this.state.amount),\r\n      transactionType: e.currentTarget.name,\r\n      amount: '',\r\n    });\r\n    this.setState(prevState => ({\r\n      income: Number(prevState.income) + Number(this.state.amount),\r\n    }));\r\n\r\n    this.saveTransaction(this.state.amount, this.state.transactionType);\r\n    console.log(this.state.transactionType);\r\n  };\r\n  saveTransaction = (amount, transactionType) => {\r\n    const transaction = {\r\n      id: shortId.generate(),\r\n      amount: amount,\r\n      date: new Date().toLocaleString(),\r\n      type: transactionType,\r\n    };\r\n    this.handleSubmit(transaction);\r\n  };\r\n  handleSubmit = transaction => {\r\n    this.setState(state => ({\r\n      transactions: [...this.state.transactions, transaction],\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { amount, expenses, income, balance, transactions } = this.state;\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <Controls\r\n          amount={amount}\r\n          handleChange={this.handleChange}\r\n          onWithdraw={this.onWithdraw}\r\n          onDeposit={this.onDeposit}\r\n        />\r\n\r\n        <Balance balance={balance} income={income} expenses={expenses} />\r\n\r\n        <TransactionHistory transactions={transactions} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Dashboard from './components/Dashboard/Dashboard';\r\n\r\nReactDOM.render(<Dashboard />, document.getElementById('root'));\r\n"],"sourceRoot":""}